import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { type } from 'os';
import { RootState, AppThunk } from '../store';

export type Status = 'idle' | 'loading' | 'failed' | 'none';
export interface ModelProps {
  isOpen: boolean;
}

export interface ModalState {
  modalType: '' | null;
  modalProps: ModelProps;
  isOpen: boolean;
  status: Status;
  responsePageId: number | null;
}

const initialState: ModalState = {
  modalType: null,
  modalProps: { isOpen: false },
  isOpen: false,
  status: 'none',
  responsePageId: null,
};

const mockFetchApi = (pageId: number) => {
  return new Promise<{ data: number }>((resolve) =>
    // eslint-disable-next-line no-promise-executor-return
    setTimeout(() => resolve({ data: pageId + 1 }), 500),
  );
};

export const modalAsync = createAsyncThunk('modal/beforeOpenMoadlDataFetch', async (pageId: number) => {
  const response = await mockFetchApi(pageId);
  return response.data;
});

// eslint-disable-next-line default-param-last
export const modalSlice = createSlice({
  name: 'modal',
  initialState,
  // The 'reducers' field lets us define reducers and generate associated actions
  reducers: {
    showModal: (_state: ModalState, action: PayloadAction<ModalState>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable store based off those changes
      _state.modalType = action.payload.modalType;
      _state.modalProps = action.payload.modalProps;
      _state.isOpen = action.payload.isOpen;
      _state.responsePageId = action.payload.responsePageId;
    },
    hideModal: (_state: ModalState) => {
      _state.modalType = initialState.modalType;
      _state.modalProps = initialState.modalProps;
      _state.isOpen = initialState.isOpen;
    },
  },
  // The 'extraReducers' field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in the slices
  extraReducers: (builder) => {
    builder
      .addCase(modalAsync.pending, (_state) => {
        _state.status = 'loading';
      })
      .addCase(modalAsync.fulfilled, (_state, action) => {
        _state.status = 'idle';
        _state.responsePageId = action.payload;
      })
      .addCase(modalAsync.rejected, (_state) => {
        _state.status = 'failed';
      });
  },
});

export const { showModal, hideModal } = modalSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState)) => state.counter.value`
export const selectResponsePageId = (state: RootState) => state.modals.responsePageId;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const showNextModalPageIfDividedBy10 =
  (pageId: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectResponsePageId(getState()) ?? 0;
    if (currentValue ?? currentValue % 10 === 0) {
      dispatch(showModal({ ...initialState, modalProps: { isOpen: true }, responsePageId: pageId }));
    }
  };

export default modalSlice.reducer;
